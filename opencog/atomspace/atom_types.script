//
// Script for automatic "atom type" generation. For more information,
// consult the opencog/atomspace/README file.
//
// Please note: some of the types below are used only via the scheme
// bindings. Thus, just because you can comment some of these out, and
// the code still compiles, that does not mean that these types are
// unused!  Be sure to grep for the CamelCase names, to see if they
// show up elsewhere!
//
// Some of them are used by Python PLN code (which also uses the
// CamelCase names).
//
// Special type designating that no atom type has been assigned.
NOTYPE

// Base of hierarchy
ATOM
NODE <- ATOM
LINK <- ATOM

CONCEPT_NODE <- NODE
NUMBER_NODE <- NODE

// Basic Links
ORDERED_LINK <- LINK
UNORDERED_LINK <- LINK

// Basic sets
SET_LINK <- UNORDERED_LINK
LIST_LINK <- ORDERED_LINK
MEMBER_LINK <- ORDERED_LINK

// SUBSET_LINK is semantically equivalent to EXTENSIONAL_INHERITANCE_LINK.
// Therefore the later has been removed.
SUBSET_LINK <- ORDERED_LINK
INTENSIONAL_INHERITANCE_LINK <- ORDERED_LINK
EXTENSIONAL_SIMILARITY_LINK <- UNORDERED_LINK
INTENSIONAL_SIMILARITY_LINK <- UNORDERED_LINK

// Boolean set operations, logical constants
// The ordered version of AND_LINK is SEQUENTIAL_AND_LINK, below.
// These are used by the pattern match to perform boolean combinations
// of predicates.
AND_LINK <- UNORDERED_LINK
OR_LINK <- UNORDERED_LINK
NOT_LINK <- UNORDERED_LINK
SEQUENTIAL_AND_LINK <- ORDERED_LINK

// The 'intuitionist logic' version of NOT_LINK is ABSENT_LINK.
// In 'intuitionist logic', the opposite of "true" is not "false",
// the opposite is "don't know".  ABSENT_LINK is the effective
// don't-know link.  Currently, it is used during pattern matching
// to find clauses that may or may not be present: clauses that are
// optionally present.
ABSENT_LINK <- UNORDERED_LINK

// The 'intuitionist logic' version of OR_LINK is 'multiple choice'
// (the 'axiom of choice', by terrible abuse of terminology).  The
// ChoiceLink states that a choice must be made.  Here, it is explicitly
// an exclusive choice: you can only choose one of the alternatives.
// The alternatives are just that: alternatives. They are not true/false
// valued; they're simply options on a menu. Pick one.  It is an ordered
// link, in the sense that the first choice might be preferable.
//
// Currently, the only reason this exists is for the pattern matcher;
// you use it to say "match this graph or this graph or this graph".
//
CHOICE_LINK <- ORDERED_LINK

// ====================================================================
// Herbrand/First-order-logic/lambda-calc/model-theory style links
// and nodes.  This are used to implement the pattern matcher, and
// everything built from the pattern matcher, including the query
// engine, the atomspace indexes, and the graph rewrite rules.
//
// Not all of these are in active use: e.g. SCHOLEM_LINK is not used ATM.

// Universe of discourse
CONTEXT_LINK <- ORDERED_LINK

// ---------------------------------------------------------
// Basic first-order logic ungrounded terms and term types

// Type declarations
TYPE_NODE <- NODE
TYPE_CHOICE <- OR_LINK     // used for type polymorphism

// Variables and variable types
VARIABLE_NODE <- NODE
TYPED_VARIABLE_LINK <- ORDERED_LINK

// A list of variables or variable declarations.
VARIABLE_LIST <- LIST_LINK

// Everything under a QuoteLink is interpreted literally.
QUOTE_LINK <- ORDERED_LINK

// Pattern and function declaration
// A ScopeLink is (more or less???) the same thing as a LambdaLink
// (We have not yet settled on the appropriate definition of a
// LambdaLink) The ScopeLink is used to identify an open term, i.e. a
// link containing VariableNodes within it, and then listing those
// variables, and forcing type restrictions on them. Thus, in a certain
// sense, the ScopeLink explicitly binds at least some, and maybe all
// of the variables that occur in it's body.  It differs from the
// FreeLink in that the FreeLink necessarily list ALL the (free)
// variables within it; the ScopeLink need not bind all of them.
// The FreeLink also has no type restrictions on the variables.
SCOPE_LINK <- VARIABLE_LIST
DEFINE_LINK <- ORDERED_LINK     // Gives a scoped lambda a name
BETA_REDEX <- ORDERED_LINK      // Beta reduction of bound variables

// Scoping and Logical quantifiers
CONCRETE_LINK <- ORDERED_LINK       // a set of clauses with no virtuals
SATISFACTION_LINK <- CONCRETE_LINK   // Finds all groundings
BIND_LINK <- SATISFACTION_LINK     // Finds all groundings and executes

FORALL_LINK <- SCOPE_LINK "ForAllLink"
EXISTS_LINK <- SCOPE_LINK
AVERAGE_LINK <- FORALL_LINK

// Convert predicate into concept
SATISFYING_SET_LINK <- UNORDERED_LINK

// ??? What is this???
SCHOLEM_LINK <- ORDERED_LINK

// Basic first-order logic operations
// These inherit from ForAll because if these contain variables, then
// those variables are implicitly scoped to this link (i.e. are not
// free, but are bound to this link.) Truth-value wise, these behave
// like AVERAGE_LINK, averaging over the for-all universe that they
// apply to.
IMPLICATION_LINK <- AVERAGE_LINK
EQUIVALENCE_LINK <- AVERAGE_LINK

// Generic association
ASSOCIATIVE_LINK <- ORDERED_LINK

// Inheritence and association links
INHERITANCE_LINK <- ORDERED_LINK
SIMILARITY_LINK <- UNORDERED_LINK
ATTRACTION_LINK <- ORDERED_LINK

// A FreeLink is any kind of link that might be evaluatable or
// executable in some way, and can have free variables in it. The
// FreeLink exists for one purpose: to make visible to the pattern
// matcher all of the free variables that lie within the link. That is,
// the FreeLink is at the top of a tree, and somewere in that tree,
// there might be VariableNodes.  The C++ class for this link records
// the names of those variables, in order of traversal.  The goal here
// is to simply know these variables, so that, at the time of evaluation
// or execution, they are easily located.
//
// The variables are necessarily free: they to NOT have type
// declarations or restrictions associated with them.  This is in sharp
// contrast to ScopeLink, which binds variables by scoping them, and
// then forcing type restrictions to them.
//
// FreeLinks may be open or closed; they are closed terms if they
// have no free variables in them.
//
// XXX TODO -- Review and possibly remove. FreeLinks were introduced for
// the pattern matcher, to simplify the handling of expressions with
// free variables in them (by pulling out those variables beforehand, at
// link-creation time, rather than at runtime). However, due to
// shared-libary conflicts, the FreeLink cannot currently be used in
// this way.  Thus, its half-finished and currently semi-useless.
FREE_LINK <- ORDERED_LINK

// To be used with PredicateNode
EVALUATION_LINK <- FREE_LINK

EXECUTION_LINK <- ORDERED_LINK

// Procedure, schema and predicate nodes.
// These are used to define functions and predicates (relations)
PROCEDURE_NODE <- NODE
GROUNDED_PROCEDURE_NODE <- PROCEDURE_NODE

SCHEMA_NODE <- PROCEDURE_NODE
GROUNDED_SCHEMA_NODE <- SCHEMA_NODE,GROUNDED_PROCEDURE_NODE

PREDICATE_NODE <- SCHEMA_NODE
GROUNDED_PREDICATE_NODE <- PREDICATE_NODE,GROUNDED_PROCEDURE_NODE
DEFINED_RELATIONSHIP_NODE <- PREDICATE_NODE // Generic relations

SCHEMA_EXECUTION_LINK <- INHERITANCE_LINK
SCHEMA_EVALUATION_LINK <- SCHEMA_EXECUTION_LINK

// ====================================================================
// Synchronization primitive, used to mark stages of a processing
// pipeline; used as a fence or guard barrier, make sure that earlier
// stages have completed processing before later ones start.
// Basically, hypergraphs may be attached to the anchor, with a
// ListLink, to indicate that they are either done, or awaiting
// processing.
ANCHOR_NODE <- NODE

// ====================================================================
// Link for mathematics. (???) Huh? What is this? What does it do?
QUANTITY_LINK <- ORDERED_LINK

// A VirtualLink is equivalent to an EvaluationLink, with a
// GroundedPredicateNode in it, except that the GPN is "built in".
// So, for example, GreaterThanLink is equivalent to an EvaluationLink
// with a GroundedPredicateNode "c++:greater_than". The built-in
// evaluation links have better performance, since they don't need
// to make a call to external scheme or python code to get evaluated.
//
// The VirtuaLink designation is needed by the pattern matcher,
// in order to be able to find and treat these terms correctly.
// 
// VirtualLinks only need to be used for those GPN's that take 2 or
// more arguments. If they take only one, then there is no reason
// for them to be delcared as virtual (at least, as far as the pattern
// matcher is concerned, with, right now, is the unly user of this
// link type.)
VIRTUAL_LINK <- EVALUATION_LINK
GREATER_THAN_LINK <- VIRTUAL_LINK
EQUAL_LINK <- VIRTUAL_LINK

// Same idea as the VirtualLink, but for ExecutionOutputLinks.
// Recall: FreeLink simply keeps track of the free variables in an
// ordered link.  A FunctionLink is a link that can be executed,
// with the result of execution being some atom.  There
// ExecutionOutPutLink is a specific kind of function: it must
// have a GroundedSchemeNode as its first argument.  The other
// kinds of FunctionLinks do not have this restriction: indeed,
// the actual function they perform is implicit in the link type.
FUNCTION_LINK <- FREE_LINK
EXECUTION_OUTPUT_LINK <- FUNCTION_LINK

// Basic arithmetic operators
FOLD_LINK <- FUNCTION_LINK
PLUS_LINK <- FOLD_LINK
TIMES_LINK <- FOLD_LINK

// This is an interesting one. It is a link that must never be grounded!
// It must contain at least one VariableNode somewhere within it; that
// is, it must be an "open sentence" and never a "closed sentence".
// (as it would be called, if we were using the termiology of ordinary
// logic).
//
// Attempting to insert a DeleteLink holding a fully grounded term
// (holding a closed sentence) will instead cause the the term to be
// deleted from the AtomSpace, thus the name.  This is meant to be used
// with the pattern matcher, so that if it discovers a grounding, the
// grounded term is deleted.
//
DELETE_LINK <- FUNCTION_LINK

// Adding custom link types for bio
// Should NOT be pushed to main opencog project
GENE_NODE <- CONCEPT_NODE
PROTEIN_NODE <- CONCEPT_NODE

// The Add, Assign and RemoveLink's all expect at TypeNode as the first
// member of thier outgoing set.  When these execute, they add or remove
// the named type to the atomsapce.  Thus, they are like ProLog's assert
// and retract predicates.
ASSIGN_LINK <- FUNCTION_LINK
INSERT_LINK <- ASSIGN_LINK
REMOVE_LINK <- ASSIGN_LINK

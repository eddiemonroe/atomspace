/*
 * tests/query/FuzzyPatternUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * Author: Leung Man Hin <https://github.com/leungmanhin>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/FuzzyMatch/FuzzyPatternMatchCB.h>
#include <opencog/query/FuzzyMatch/FuzzyPatternMatch.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

#include "imply.h"
#include "test-types.h"

using namespace opencog;

class FuzzyPatternUTest : public CxxTest::TestSuite
{
	private:
		AtomSpace* as;

		Handle hel1;
		Handle hel2;
		Handle hel3;
		Handle hel4;

	public:
		FuzzyPatternUTest(void)
		{
			logger().setLevel(Logger::DEBUG);
			logger().setPrintToStdoutFlag(true);

			as = new AtomSpace();
		}

		~FuzzyPatternUTest()
		{
			delete as;
			// Erase the log file if no assertions failed.
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);
		void tearDown(void);

		void test_fuzzy_match(void);
		void test_exact_match(void);
};

/*
 * This function sets up the following structures:
 *
 *    EvaluationLink
 *       PredicateNode "eats"
 *       ListLink
 *          ConceptNode "Tom"
 *          ConceptNode "oranges"
 *
 *    EvaluationLink
 *       PredicateNode "eats"
 *       ListLink
 *          ConceptNode "Ray"
 *          ConceptNode "apples"
 *
 *    EvaluationLink
 *       PredicateNode "reads"
 *       ListLink
 *          ConceptNode "Ray"
 *          ConceptNode "books"
 *
 *    EvaluationLink
 *       PredicateNode "reads"
 *       ListLink
 *          ConceptNode "Mary"
 *          ConceptNode "books"
 *
 */
void FuzzyPatternUTest::tearDown(void)
{

}

#define an as->add_node
#define al as->add_link
void FuzzyPatternUTest::setUp(void)
{
	// The solution of test_fuzzy_match
	hel1 = al(EVALUATION_LINK,
			an(PREDICATE_NODE, "eats"),
			al(LIST_LINK,
				an(CONCEPT_NODE, "Tom"),
				an(CONCEPT_NODE, "oranges")
			)
		   );

	hel2 = al(EVALUATION_LINK,
			an(PREDICATE_NODE, "eats"),
			al(LIST_LINK,
				an(CONCEPT_NODE, "Ray"),
				an(CONCEPT_NODE, "apples")
			)
		   );

	// The solution of test_exact_match
	hel3 = al(EVALUATION_LINK,
			an(PREDICATE_NODE, "reads"),
			al(LIST_LINK,
				an(CONCEPT_NODE, "Ray"),
				an(CONCEPT_NODE, "books")
			)
		   );

	hel4 = al(EVALUATION_LINK,
			an(PREDICATE_NODE, "reads"),
			al(LIST_LINK,
				an(CONCEPT_NODE, "Mary"),
				an(CONCEPT_NODE, "books")
			)
		   );
}


void FuzzyPatternUTest::test_fuzzy_match(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle var = an(VARIABLE_NODE, "$var");

	// Construct the query
	Handle query = al(EVALUATION_LINK,
					an(PREDICATE_NODE, "plays"),
					al(LIST_LINK,
						an(CONCEPT_NODE, "Tom"),
						var
					)
				  );

	FuzzyPatternMatchCB fpmcb(as);

	std::set<Handle> vars;
	vars.insert(var);

	HandleSeq preds;
	preds.push_back(query);

	match(fpmcb, vars, preds);

	TSM_ASSERT_EQUALS("Wrong number of solutions", fpmcb.solns.size(), 1);
	TSM_ASSERT_EQUALS("Wrong match", fpmcb.solns[0].value(), hel1.value());

	logger().debug("END TEST: %s", __FUNCTION__);
}


void FuzzyPatternUTest::test_exact_match(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle var = an(VARIABLE_NODE, "$var");

	// Construct the query
	Handle query = al(EVALUATION_LINK,
					an(PREDICATE_NODE, "reads"),
					al(LIST_LINK,
						an(CONCEPT_NODE, "Ray"),
						var
					)
				  );

	FuzzyPatternMatchCB fpmcb(as);

	std::set<Handle> vars;
	vars.insert(var);

	HandleSeq preds;
	preds.push_back(query);

	match(fpmcb, vars, preds);

	TSM_ASSERT_EQUALS("Wrong number of solutions", fpmcb.solns.size(), 1);
	TSM_ASSERT_EQUALS("Wrong match", fpmcb.solns[0].value(), hel3.value());

	logger().debug("END TEST: %s", __FUNCTION__);
}


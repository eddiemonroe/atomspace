/*
 * tests/query/BuggyEqualUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class BuggyEqual :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval* eval;

	public:

		BuggyEqual(void)
		{
			logger().setLevel(Logger::DEBUG);
			logger().setPrintToStdoutFlag(true);

			as = new AtomSpace();
			eval = new SchemeEval(as);
		}

		~BuggyEqual()
		{
			delete eval;
			delete as;
			// Erase the log file if no assertions failed.
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { as->clear(); }

		void test_bugeq(void);
		void test_bugalt(void);
};

void BuggyEqual::setUp(void)
{
	as->clear();

	config().set("SCM_PRELOAD",
		"opencog/atomspace/core_types.scm, "
		"opencog/scm/utilities.scm, "
      "opencog/scm/opencog/query.scm");

	load_scm_files_from_config(*as);
}

#define getlink(hand,pos) as->getOutgoing(hand,pos)
#define getarity(hand) as->getArity(hand)

/*
 * NotLink causing weird trouble.
 */
void BuggyEqual::test_bugeq(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD", "tests/query/buggy-equal.scm");
	load_scm_files_from_config(*as);

	Handle pln = eval->eval_h("(cog-bind pln-rule-deduction)");
	printf("Deduction results:\n%s\n", pln->toShortString().c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 4, getarity(pln));

	logger().debug("END TEST: %s", __FUNCTION__);
}
/*
 * NotLink causing weird trouble.
 */
void BuggyEqual::test_bugalt(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD", "tests/query/buggy-equal.scm");
	load_scm_files_from_config(*as);

	Handle alt = eval->eval_h("(cog-bind pln-alt)");
	printf("Alt results:\n%s\n", alt->toShortString().c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 4, getarity(alt));

	logger().debug("END TEST: %s", __FUNCTION__);
}

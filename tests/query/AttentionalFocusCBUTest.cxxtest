/*
 * AttentionalFocusCBUTest.cxxtest
 *
 * Copyright (C) 2014 Misgana Bayetta
 *
 * Author: Misgana Bayetta <misgana.bayetta@gmail.com>  July 2014
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class AttentionalFocusCBUTest: public CxxTest::TestSuite {
private:
	AtomSpace * as;
	SchemeEval * eval;
public:
	AttentionalFocusCBUTest(void)
	{
		try {
			config().load("opencog-test.conf");
		} catch (RuntimeException &e) {
			std::cerr << e.getMessage() << std::endl;
		}
		logger().setFilename(config()["LOG_FILE"]);
		logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
		logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

		as = new AtomSpace();
		eval = new SchemeEval(as);
	}

	~AttentionalFocusCBUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().getFilename().c_str());
	}

	void setUp(void);
	void tearDown(void);
	void test_pln_bindlink(void);
};

void AttentionalFocusCBUTest::tearDown(void)
{
}

void AttentionalFocusCBUTest::setUp(void)
{
	config().set("SCM_PRELOAD",
	      "opencog/atomspace/core_types.scm, "
			"opencog/scm/utilities.scm");

	load_scm_files_from_config(*as);
}

void AttentionalFocusCBUTest::test_pln_bindlink(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
    as->setAttentionalFocusBoundary(20); //for test purpose
	config().set("SCM_PRELOAD", "tests/query/af-filtering-test.scm");
	load_scm_files_from_config(*as);
	Handle findMan = eval->eval_h("find-man");
	// Test PatternMatch::pln_bindlink, which should only return the
	// first match
	Handle answersSingle = pln_bindlink(as, findMan);
	TS_ASSERT_EQUALS(1, as->getArity(answersSingle));
	TS_ASSERT_EQUALS(20,as->getAttentionalFocusBoundary());
}

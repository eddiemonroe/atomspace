/*
 * tests/query/GreaterComputeUTest.cxxtest
 *
 * Copyright (C) 2014, 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class GreaterComputeUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    GreaterComputeUTest(void)
    {
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
    }

    ~GreaterComputeUTest()
    {
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_computation(void);
};

void GreaterComputeUTest::tearDown(void)
{
}

void GreaterComputeUTest::setUp(void)
{
    config().set("SCM_PRELOAD",
        "opencog/atomspace/core_types.scm, "
        "opencog/scm/opencog/exec.scm, "
        "opencog/scm/utilities.scm");

    load_scm_files_from_config(*as);
}

/*
 * Computation unit test. Defines a fairly simple search pattern that
 * requires a variety of computatinos to occur within it.
 */
void GreaterComputeUTest::test_computation(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/greater-compute.scm");
    load_scm_files_from_config(*as);

    Handle try_out = eval->eval_h("(threshold)");

    Handle crash_b = bindlink(as, try_out);

    std::cout << "Answer: " << crash_b->toString() << std::endl;
    TS_ASSERT_EQUALS(1, as->get_arity(crash_b));

    // Create the expected answer, and compare
    Handle expected = eval->eval_h(
    "(SetLink "
    "   (EvaluationLink "
    "      (PredicateNode \"power\")"
    "      (ListLink "
    "         (ConceptNode \"Ken\")"
    "         (NumberNode 1000))))");

    TS_ASSERT_EQUALS(crash_b, expected);
}

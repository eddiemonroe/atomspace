/*
 * tests/query/StackMoreUTest.cxxtest
 *
 * Copyright (C) 2009, 2011, 2015 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

#include "test-types.h"

using namespace opencog;

class StackMoreUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		Handle bind_oo, bind_ou, many_ou, bind_ouu;
		Handle bind_uo, bind_uu, bind_uuu;

	public:

		StackMoreUTest(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			// logger().setLevel(Logger::DEBUG);
			// logger().setPrintToStdoutFlag(true);
		}

		~StackMoreUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_oo(void);
		void test_ou(void);
		void test_many_ou(void);
		void test_ouu(void);
		void test_uo(void);
		void test_uu(void);
		void test_uuu(void);
};

/*
 * This function sets up an implication link, and some data.
 */
#define an as->addNode
#define al as->addLink
void StackMoreUTest::setUp(void)
{
	as = new AtomSpace();

	config().set("SCM_PRELOAD",
		"opencog/atomspace/core_types.scm, "
      "tests/query/test_types.scm, "
		"tests/query/stackmore-o-o.scm, "
		"tests/query/stackmore-o-u.scm, "
		"tests/query/stackmany-o-u.scm, "
		"tests/query/stackmore-o-uu.scm, "
		"tests/query/stackmore-u-o.scm, "
		"tests/query/stackmore-u-u.scm, "
		"tests/query/stackmore-u-uu.scm");

	load_scm_files_from_config(*as);

	// Create an implication link that will be tested.
	SchemeEval* eval = new SchemeEval(as);
	bind_oo = eval->apply("bind_oo", Handle::UNDEFINED);
	bind_ou = eval->apply("bind_ou", Handle::UNDEFINED);
	many_ou = eval->apply("many_ou", Handle::UNDEFINED);
	bind_ouu = eval->apply("bind_ouu", Handle::UNDEFINED);
	bind_uo = eval->apply("bind_uo", Handle::UNDEFINED);
	bind_uu = eval->apply("bind_uu", Handle::UNDEFINED);
	bind_uuu = eval->apply("bind_uuu", Handle::UNDEFINED);
	delete eval;
}

/*
 * Test of pattern matching on multi-variable matches with
 * confounding intermediate data.
 */
#define getlink(hand,pos) as->getOutgoing(hand,pos)
#define getarity(hand) as->getArity(hand)

void StackMoreUTest::test_oo(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != bind_oo);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, bind_oo);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

void StackMoreUTest::test_ou(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != bind_ou);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, bind_ou);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

void StackMoreUTest::test_many_ou(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != many_ou);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, many_ou);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

void StackMoreUTest::test_ouu(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != bind_ouu);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, bind_ouu);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

void StackMoreUTest::test_uo(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != bind_uo);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, bind_uo);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

void StackMoreUTest::test_uu(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != bind_uu);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, bind_uu);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

void StackMoreUTest::test_uuu(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != bind_uuu);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, bind_uuu);

	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}

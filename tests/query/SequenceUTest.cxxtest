/*
 * tests/query/SequenceUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class SequenceUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    SequenceUTest(void)
    {
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
    }

    ~SequenceUTest()
    {
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_sequence(void);
};

void SequenceUTest::tearDown(void)
{
}

void SequenceUTest::setUp(void)
{
    config().set("SCM_PRELOAD",
        "opencog/atomspace/core_types.scm, "
        "opencog/scm/utilities.scm,"
        "opencog/scm/opencog/query.scm");

    load_scm_files_from_config(*as);
}

/*
 * Basic SequenceLink unit test.
 */
void SequenceUTest::test_sequence(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/sequence.scm");
    load_scm_files_from_config(*as);

    // This should throw an exception from scheme.
    // Disable logging so as to avoid the hopeless spew of errors.
    logger().setLevel(Logger::NONE);
    bool caught_exception = false;
    try
    {
        eval->eval_tv("(cog-satisfy (off-road))");
    }
    catch (const RuntimeException &e)
    {
        caught_exception = true;
    }
    TS_ASSERT_EQUALS(true, caught_exception);
    logger().setLevel(Logger::INFO);

    // This should not throw any exceptions.
    TruthValuePtr tv = eval->eval_tv("(cog-satisfy (traffic-lights))");

    // Check the number of green lights and red lights that were
    // evaluated. The pattern has two green lights and one red
    // light... The GPN's count how many times these are hit, and
    // the counts should be correct.
    std::string sngreen = eval->eval("num-green");
    std::string snred = eval->eval("num-red");
    int ngreen = atoi(sngreen.c_str());
    int nred = atoi(snred.c_str());
    TS_ASSERT_EQUALS(2, ngreen);
    TS_ASSERT_EQUALS(1, nred);

    TS_ASSERT_LESS_THAN_EQUALS(tv->getMean(), 0.5);
}

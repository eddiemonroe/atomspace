#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Config.h>

#include <opencog/rule-engine/UREConfigReader.h>

using namespace opencog;

class UREConfigReaderUTest : public CxxTest::TestSuite {
private:
	AtomSpace _as;
	SchemeEval _eval;

public:
	UREConfigReaderUTest() : _eval(&_as)
	{
		config().set("SCM_PRELOAD",
		             "opencog/atomspace/core_types.scm");
		load_scm_files_from_config(_as);

		// add the following so that utilities.scm and av-tv.scm are
		// correctly loaded from crisp.scm
		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "/opencog/scm\")");

		// Load utilities.scm and rule-engine-utils.scm. Apparently
		// the modules' functions are not loaded
		_eval.eval("(load-from-path \"utilities.scm\")");
		_eval.eval("(load-from-path \"rule-engine-utils.scm\")");

		// Load the simple crisp system example to test it
		string eval_output =
			_eval.eval("(load-from-path \"" PROJECT_SOURCE_DIR
			           "/examples/rule-engine/crisp.scm\")");
		std::cout << "eval_output = " << eval_output << std::endl;

		std::cout << "AtomSpace = " << _as << std::endl;
	}

	void test_read_config() {
		// Get the ConceptNode corresponding to the rule-based system
		// to test
		Handle rbs = _as.get_node(CONCEPT_NODE, "crisp-rule-base");

		UREConfigReader cr(_as, rbs);

		TS_ASSERT_EQUALS(cr.get_rules().size(), 2);
		TS_ASSERT_EQUALS(cr.get_attention_allocation(), false);
		TS_ASSERT_EQUALS(cr.get_maximum_iterations(), 20);
	}
};

/*
 * PLNCommons.cxxtest
 *
 *  Created on: Oct 22, 2014
 *      Author: misgana
 */

#include <opencog/rule-engine/URECommons.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Config.h>
#include <opencog/guile/load-file.h>
//TODO test choose_target
using namespace opencog;
class URECommonsUTest: public CxxTest::TestSuite {
private:
	AtomSpace as_;
	URECommons commons_;
	SchemeEval eval_;
public:
	URECommonsUTest() : commons_(as_), eval_(&as_) {}
	void setUp();
	void tearDown();

	void test_get_root_links(void);
	void test_create_bindLink(void);

};

void URECommonsUTest::setUp() {
	config().set("SCM_PRELOAD", "opencog/atomspace/core_types.scm, "
			"opencog/scm/utilities.scm, "
			"opencog/python/pln_old/examples/deduction/atomspace_contents.scm");
	load_scm_files_from_config(as_);
}

void URECommonsUTest::tearDown() {
	as_.clear();
}

void URECommonsUTest::test_get_root_links(void) {
	string bindlink =
			"(BindLink"
					"   (VariableList"
					"       (VariableNode \"$A\")"
					"       (VariableNode \"$B\")"
					"       (VariableNode \"$C\"))"
					"   (AndLink"
					"       (InheritanceLink"
					"           (VariableNode \"$A\")"
					"           (VariableNode \"$B\"))"
					"       (InheritanceLink"
					"           (VariableNode \"$B\")"
					"           (VariableNode \"$C\")))"
					"   (ExecutionOutputLink"
					"       (GroundedSchemaNode \"scm: pln-formula-simple-deduction\")"
					"           (ListLink"
					"               (InheritanceLink"
					"                   (VariableNode \"$A\")"
					"                   (VariableNode \"$B\"))"
					"               (InheritanceLink"
					"                   (VariableNode \"$B\")"
					"                   (VariableNode \"$C\"))"
					"               (InheritanceLink"
					"                   (VariableNode \"$A\")"
					"                   (VariableNode \"$C\"))))))";
	string target = "(InheritanceLink"
			"   (VariableNode \"$A\")"
			"   (VariableNode \"$B\"))";
	Handle hb = eval_.eval_h(bindlink);
	Handle ht = eval_.eval_h(target);
	HandleSeq roots;
	commons_.get_root_links(ht, roots);
	TS_ASSERT_EQUALS(1, roots.size());

	//checking with multiple atomspace
	AtomSpace temp;
	SchemeEval sceval(&temp);
	sceval.eval_h(bindlink);
	auto ht_cpy = sceval.eval_h(target);
	URECommons rec(temp);
	HandleSeq rootsx;
	rec.get_root_links(ht_cpy, rootsx);
	TS_ASSERT_EQUALS(1, rootsx.size());
}

void URECommonsUTest::test_create_bindLink() {
//TODO expand this test
	Handle himplicant = eval_.eval_h("(InheritanceLink"
	                                 "   (VariableNode \"$var-rich\")"
	                                 "   (ConceptNode \"happy\"))");
	Handle h = commons_.create_bindLink(himplicant, false);

	TS_ASSERT_EQUALS(BIND_LINK, h->getType());
}


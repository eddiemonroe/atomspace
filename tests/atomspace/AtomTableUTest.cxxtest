/*
 * tests/atomspace/AtomTableUTest.cxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by OpenCog Foundation
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *            Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>
#include <fstream>

// We must use the PROJECT_SOURCE_DIR var supplied by the CMake script to
// ensure we find the file whether or not we're building using a separate build
// dir
#define ATOM_TABLE_TEST_SCM_FILE PROJECT_SOURCE_DIR"/tests/atomspace/atom_table_utest.scm"

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/AtomTable.h>
#include <opencog/atomspace/ClassServer.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/guile/load-file.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/util/platform.h>
#include <opencog/util/mt19937ar.h>
#include "../query/test-types.h"

using namespace opencog;
using namespace std;

const char* gpnNames[] = {"GPN1", "GPN2", "GPN3", "GPN4", "GNP5", "GNP6"};
int numberOfExpectedMatches[] = {26, 26, 26, 1, 1, 1};

class AtomTableUTest : public CxxTest::TestSuite
{

private:

    AtomTable* table;
    AtomSpace* atomSpace;

public:

    AtomTableUTest() {
        // Uncomment to enable logging
        //logger().setLevel(Logger::DEBUG);
        //logger().setPrintToStdoutFlag(true);

        atomSpace = new AtomSpace();
        table = (AtomTable*) & (atomSpace->get_atomtable());
    }
    ~AtomTableUTest() {
        delete atomSpace;
    }

    void setUp()
    {
        atomSpace->clear();
        /* load scm files with all necessary nodes and links  */
        load_scm_file(*atomSpace, "opencog/atomspace/core_types.scm");
        load_scm_file(*atomSpace, "tests/query/test_types.scm");
        // load_scm_file(*atomSpace, ATOM_TABLE_TEST_SCM_FILE);
    }

    void tearDown() {
        atomSpace->clear();
    }

    void testSimple()
    {
        Handle time = table->add(createNode(TIME_NODE, "1"), true);
        Handle word = table->add(createNode(NUMBER_NODE, "1"), true);
        Handle sense = table->add(createNode(CONCEPT_NODE, "28675194"), true);
        std::vector<Handle> os;
        os.push_back(time);
        os.push_back(word);
        os.push_back(sense);
        table->add(createLink(INHERITANCE_LINK, os), true);
        table->barrier();
    }

    void testHolds()
    {
        Handle h(100101);
        Handle word = table->add(createNode(NUMBER_NODE, "1"), false);
        TS_ASSERT(table->holds(word));
        TS_ASSERT(!table->holds(h));
    }

    void testIsCleared()
    {
        atomSpace->clear();
        TS_ASSERT(table->isCleared());
        Handle word = table->add(createNode(NUMBER_NODE, "1"), false);
        TS_ASSERT(!table->isCleared());
    }

    void doRecursiveAdd(Type list_type)
    {
        Handle hn1(createNode(NUMBER_NODE, "1"));
        Handle hn2(createNode(NUMBER_NODE, "2"));
        Handle hn3(createNode(NUMBER_NODE, "3"));
        Handle hn4(createNode(NUMBER_NODE, "4"));
        Handle hnp(createNode(PREDICATE_NODE, "diequalized"));

        // The unordered link will get tested second,
        // and will get a scrambled set of UUID's.
        Handle hll;
        if (list_type == LIST_LINK)
            hll = createLink(list_type, hn1, hn2, hn3, hn4);
        else if (list_type == SET_LINK)
            hll = createLink(list_type, hn4, hn1, hn2, hn3);
        else
            hll = createLink(list_type, hn4, hn2, hn3, hn1);
        Handle hle(createLink(EVALUATION_LINK, hnp, hll));

        // No UUID should be assigned yet.
        TS_ASSERT_EQUALS(hn1.value(), Handle::INVALID_UUID);
        TS_ASSERT_EQUALS(hn2.value(), Handle::INVALID_UUID);
        TS_ASSERT_EQUALS(hn3.value(), Handle::INVALID_UUID);
        TS_ASSERT_EQUALS(hn4.value(), Handle::INVALID_UUID);
        TS_ASSERT_EQUALS(hnp.value(), Handle::INVALID_UUID);
        TS_ASSERT_EQUALS(hll.value(), Handle::INVALID_UUID);
        TS_ASSERT_EQUALS(hle.value(), Handle::INVALID_UUID);

        // Add the link.  All the outgoing atoms should get added too.
        Handle hlet = table->add(hle, false);
        TS_ASSERT(hlet.value() != Handle::INVALID_UUID);
        LinkPtr let(LinkCast(hlet));
        const HandleSeq& hs = let->getOutgoingSet();
        TS_ASSERT(hs[0].value() != Handle::INVALID_UUID);
        TS_ASSERT(hs[1].value() != Handle::INVALID_UUID);

        LinkPtr llt(LinkCast(hs[1]));
        const HandleSeq& hsl = llt->getOutgoingSet();
        TS_ASSERT(hsl[0].value() != Handle::INVALID_UUID);
        TS_ASSERT(hsl[1].value() != Handle::INVALID_UUID);
        TS_ASSERT(hsl[2].value() != Handle::INVALID_UUID);
        TS_ASSERT(hsl[3].value() != Handle::INVALID_UUID);

        // Now test resolution.  Given the version of the atom that is
        // not yet in the atomspace, we should be able to find the one
        // that is in the atomspace.
        Handle hle_resolved(table->getHandle(hle));
        TS_ASSERT_EQUALS(hlet.value(), hle_resolved.value());

        Handle hnp_resolved(table->getHandle(hnp));
        TS_ASSERT_EQUALS(hs[0].value(), hnp_resolved.value());

        Handle hll_resolved(table->getHandle(hll));
        TS_ASSERT_EQUALS(hs[1].value(), hll_resolved.value());

        Handle hn1_resolved(table->getHandle(hn1));
        TS_ASSERT_EQUALS(hsl[0].value(), hn1_resolved.value());

        Handle hn2_resolved(table->getHandle(hn2));
        TS_ASSERT_EQUALS(hsl[1].value(), hn2_resolved.value());

        Handle hn3_resolved(table->getHandle(hn3));
        TS_ASSERT_EQUALS(hsl[2].value(), hn3_resolved.value());

        Handle hn4_resolved(table->getHandle(hn4));
        TS_ASSERT_EQUALS(hsl[3].value(), hn4_resolved.value());
    }

    void testRecursiveAdd()
    {
        // Once for an ordered link type, and again for an unordered
        // type.   Unordered links get spcial handling.
        doRecursiveAdd(LIST_LINK);
        doRecursiveAdd(SET_LINK);
        doRecursiveAdd(OR_LINK);
        doRecursiveAdd(LIST_LINK);
    }

    void testGetRandom()
    {
        ostringstream oss;
        size_t numBuckets = table->getSize() / 10;
        for (unsigned i=0; i < numBuckets + 10; i++){
            oss.clear();
            oss << i;
            table->add(createNode(NUMBER_NODE, oss.str()), true);
        }
        table->barrier();

        RandGen* rng = new opencog::MT19937RandGen(0);
        Handle h1 = table->getRandom(rng);
        Handle h2 = table->getRandom(rng);
        int tries = 0;
        while (h1 == h2 && tries < 100) {
            // getting the same handle 100 times is extremely improbable
            // whereas one or two in a row may happen once every now and then.
            Handle h2 = table->getRandom(rng);
            tries+=1;
        }
        TS_ASSERT(h1 != h2);
        delete rng;
    }

    /* test the fix for the bug triggered whenever we had a link
     * pointing to the same atom twice (or more). */
    void testDoubleLink()
    {
        NodePtr n1(createNode(NUMBER_NODE, "1"));
        NodePtr n2(createNode(NUMBER_NODE, "2"));
        Handle hn1 = table->add(n1, false);
        Handle hn2 = table->add(n2, false);

        std::vector<Handle> os;
        os.push_back(hn1); os.push_back(hn1); os.push_back(hn2);
        LinkPtr l1(createLink(LIST_LINK, os));
        Handle hl1 = table->add(l1, false);

        // Now, remove hn1 from the table ...
        table->extract(hn1, true);

        // Number nodes are handled differently, in the atomspace. Try
        // again, with concept nodes.
        Handle h3(createNode(CONCEPT_NODE, "3"));
        os.clear();
        os.push_back(h3);
        os.push_back(h3);

        Handle l33 = table->add(createLink(LIST_LINK, os), false);
        LinkPtr lptr33(LinkCast(l33));
        HandleSeq hs = lptr33->getOutgoingSet();
        printf("hs1 & hs2 uuid's: %lu %lu\n", hs[0].value(), hs[1].value());
        printf("hs1 & hs2 ptr's: %p %p\n", hs[0].operator->(), hs[1].operator->());
        TS_ASSERT_EQUALS(hs[0], hs[1]);
    }

    void testSimpleWithCustomAtomTypes()
    {
        Type MY_NUMBER_NODE = classserver().addType(NUMBER_NODE, "MyNumberNode");
        Type MY_CONCEPT_NODE = classserver().addType(CONCEPT_NODE, "MyConceptNode");
        Type MY_INHERITANCE_LINK = classserver().addType(INHERITANCE_LINK, "MyInheritanceLink");
        logger().debug("MY_NUMBER_NODE = %u, MY_CONCEPT_NODE = %u, MY_INHERITANCE_LINK = %u\n", MY_NUMBER_NODE, MY_CONCEPT_NODE, MY_INHERITANCE_LINK);
        NodePtr wp = createNode(MY_NUMBER_NODE, "1");
        Handle word = table->add(wp, false);
        NodePtr sp = createNode(MY_CONCEPT_NODE, "28675194");
        Handle sense = table->add(sp, false);
        std::vector<Handle> os;
        os.push_back(word);
        os.push_back(sense);
        LinkPtr lp = createLink(MY_INHERITANCE_LINK, os);
        Handle lh = table->add(lp, false);

#define getHandlex(N,T) getHandle(T,N)
        TS_ASSERT(table->getHandlex("1", MY_NUMBER_NODE) != Handle::UNDEFINED);
        TS_ASSERT(table->getHandlex("28675194", MY_CONCEPT_NODE) != Handle::UNDEFINED);
        TS_ASSERT(table->getHandle(MY_INHERITANCE_LINK, os) != Handle::UNDEFINED);
    }
};
